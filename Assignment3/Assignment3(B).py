import turtle

t = turtle.Turtle()

for i in range(4):  # 동, 서, 남, 북 총 네개의 방향으로 원을 그려야 하므로 전체 루프는 4번 실행한다.
    for j in range(4):  # 각 방향마다 원을 네개씩 그려야 하므로, 내부 루프 역시 4번 실행한다.
        # 각 방향의 네개 원들의 반지름들이 최초의 반지름 비율로 증가해야 하므로, 원들의 반지름은 40 * (i+1)이 된다.
        # 반지름이 40 * i라면  첫번째 반복의 i 값이 0이므로, 첫번째 원이 그려지지 않는다. 따라서 i+1을 곱해야 한다.
        t.circle(40 * (i+1))
        t.right(90)  # 원을 시계방향으로 그려야 하므로, 하나의 원을 그리고 난 후 오른쪽으로 90도 방향을 바꿔야 한다.
    # 각 방향에 네개의 원들을 그리고 난 후에는 모든 원을 감싸는 큰 하나의 원을 그려야 한다.
    # 따라서 전체 루프가 네 번째 실행 된 후이므로 i 값이 3인 경우에 조건문을 실행한다.
    if i == 3:
        # circle 은 turtle 의 위치로부터 인자값만큼의 반지름을 가진 원을 그린다. 따라서, turtle의 위치가 중심이어서는 안된다.
        t.penup()  # turtle 의 위치를 선을 그리지 않으며 옮겨야 하므로 penup 함수를 사용한다.
        t.right(90)  # 하단으로 이동하기 위해, 동쪽을 보고 있는 turtle 을 남쪽으로 바라보게 우측으로 90도 회전시킨다.
        # 반지름이 40*(i+1)인 원이 남쪽에 있는 가장 큰 원이므로, 하단 끝으로 가려면 그 원의 지름만큼인 2*40*(i+1)만큼 이동해야 한다.
        t.forward(2*40*(i+1))
        t.left(90)  # 현재 turtle은 남쪽을 보고있고, turtle 기준 위쪽에 원을 그려야 하므로 좌측으로 90도만큼 회전시킨다.
        t.pendown()  # 이제 그려야 하므로 pendown 함수를 사용해 penup 했던 상태를 해제시켜 준다.
        # 이제, 그렸던 원들 중 가장 큰 원의 지름이 반지름인 원을 그려야 하므로 반지름이 2*40*(i+1)인 원을 그려준다.
        t.circle(2*40*(i+1))

turtle.done()
